

Dictionaries
Why are dictionaries necessary? Why not use a list?
-because you can index using keys instead of numbers and lookup time is very fast

How is the lookup time in a dictionary different from that of a list?
-the lookup time for a dictionary is much faster because you just have to look for the key not loop over every item
    to see if it's the key

How do you create an empty dictionary? How do you create a dictionary with initial content?
-you create an empty dictionary by setting whatever you want your dictionary name as equal to {}. You can create an
    inital dictionary with values by entering your_dictionary = {key1: 'value', key2: 'value'}

How do you add a new key/value pair to a dictionary? How do you update the value of a key in a dictionary?
-you add a new key:value pair by saying dictionary['key']= value
-you update the value of a dictionary by saying dictionary['key'] = value (it will update not add)

How do you remove a key/value pair from a dictionary?
-you delete an item by entering del dictionary['key']

How do you look up the value for a given key in a dictionary?
-you look up the value by typing dictionary['key'] and value will be returned

How do you iterate over a dictionary?
-you can iterate over dictionary using a foor loop, it will get each key

Print keys?
-for item in dictionary:
    print(item)

Print values?
-for item in dictionary:
    print(dictionary[item])

Print keys and values?
-dictionary.items()
    for key, value in dictionary.items():
        print(f'{key}: {value})

What is a KeyError? When does one occur?
-key error occurs when attempting to index into a dictionary with a non existant key
    can avoid by using dict.get()

Dictionary methods to know:

.get()
-dictionary.get('key', value_if_not_there)
    returns value_if_not_there

.values()
-dictionary.values():
    for value in dictionary.values():
    print(value)

.items()
-for key, value in dictionary.items():
    print(f'{key}: {value})

How do you access a dictionary within a dictionary?
-dictionary[main_key][key_within_main_key]

When should you use a dictionary?
-when you want to store information accessible by key (name to data, first string letter to list of words
    with that letter, word paired with opposite word), for counting



Python Tools
What are some characteristics of Python as compared to other programming languages?
-strongly typed, dynamic, high-level language

What are .pyc files? What is their purpose?
-pyc files are a copy of compiled source, if original .py file hasn't changed it will 
    use the .pyc file

What’s the difference between the commands python3 mygame.py and python3 -i mygame.py?
-first runs python, loads file.py, excutes code, returns to terminal when done 
-second uses python interactively, runs pythonm leaves you in python console, allows
    you to execute python expressions

Built-in Python functions to know:

dir()
-show me the methods and attributes of this object

help()
-show me documentation about how to use this object

Why does code style matter?
-well styled code is easier to read, has fewer bugs, and companies will be more likely to hire you

Key points of Python style to know

Tabs vs. Spaces
-four spaces preferred, never mix and match (in Vs Code press F1 then indentation to spaces)

Line length and how to break lines for readability
-official python says 79 char line limit

Where to put whitespace
-use to break up code, put spaces around operators, divide "paragraphs", two lines between functions

Variable name style
-use snake_case, function names should be verby, variable names should say what they are for, not what
    they are, use plural nouns for collections, singular nouns for everything else, use ALL_UPPER_CASE
    if a variable should never change

Docstrings and comments
-docstrings have inital one line summary, then more detail, always triple quote, use more
    black lines if docstring is more than one line, tell you when and why to use function,
    are for users of function
-comments tell you how function is working on inside, are for maintainers of function

What is sys.argv? What happens if you print it out?
-helps you process any file, is list of command line arguments
import sys

filename = sys.argv[1]   # first real argument
for melon_data in open(filename):
    print(melon_data)
-everything given on sys.argv is split on spaces and given as string
    python3 process.py hello 2 3 comes as ['process.py', 'hello', '2', '3']
-for multi-word phrase as one argument it needs to be quotes
    python3 process.py hi there "everyone in class" comes as ['process.py', 'hi', 'there', 'everyone in class']

Markov Chains
In the context of Markov chains, what is a bigram? What’s an n-gram?
-n gram is a sequence of n words, constructed from text, like links in a chain
-bigrams are two word phrases

How could you use dictionaries to structure a bigram markov chain implementation?
1. pick starting point
2. choose next word
3. make a new key, choose a new word (2nd word of previous key and new word are new key)
4. continue process until you've made a key not in your dictionary



Shell
VS Code shortcuts to know and use:

CTRL-/ to comment/uncomment

CTRL-] and CTRL-[ to indent/dedent (or tab and shift + tab)

Shell shortcuts and commands to know and use:

Tab completion

Up arrow/Down arrow to navigate history

CTRL-A to go to beginning of line

CTRL-E to go to end of line

CTRL-D to delete moving forward

head <some file name>   (prints first ten lines of file, can specify number w/ head -n #)

cat <some file name>    (prints entire contents of file)

tail <some file name>   (prints last ten lines of file, can specify number w/ tail -n #)
    -another useful option is -f it prints bottom 10 lines & continues w/o returning to shell

wc <some file name>     (prints linesm words, and byte length of file)

sort <some file name>   (prints file with lines sorted alphabetically)

grep <term> <some file name>
-searches text within files

Using * to file name glob
-globbing selects all of that file type (ie ls *.py)

env
-view all environmental variables

echo $PATH
-view an individual variable

which python
-shows where shell will find program

export SOME_VARIABLE='some value'
-set or change environmental variable

What is STDIN? How do you capture it using Python?
-standard input, by default is user at keyboard

What is STDOUT? How do you push to it using Python?
-where print statements go to, by default printed to shell

What is STDERR?
-where error messages go, by default printed to shell

How do you redirect the output of one shell command to a file?
-by using >, so you enter first_file > file_you_want_to_redirect_to, now will see in file not terminal

How do you redirect the output of one shell command and append it to a file?
-redirect standard output to append to file with >>, first_file >> file_to_display_at_end

How do you redirect the content of a file as input to an interactive Python script?
-redirect standard input from file with <

How do you redirect the output of one shell command to the input of another?
-with a pipeline |

What is the shell environment?
-an environment of variables, many are set but you can add or change them

What is the $PATH environment variable? What role does it play on the command line?
-environment variable used to find programs, will search path value left to right until found

How can you access the shell environment in Python?
-import os

How do you set environment variables using a .sh file?
-you put in 'shell script' (secrets.sh) then source secrets.sh when you need to



Python Projects
What is a Python module?
-importable code from a python file, allows you to separate code

What is a namespace?
-the menu of identifiers available to use, whatever variables you create are now
    in namespace

What are the 3 ways to import something in Python?
1. import module (ie import random, can now refer to random.choice)
2. from module import item (ie from random import choice, can now refer to choice() but nothing else)
3. from module import * (imports everything from random directly, can now refer to choice, randint,
    etc but not random.choice, generally not a good idea)

Why is from some_module import * not a good practice?
-not a good practice because there may be mutiple modules w/ same names
-from flask import session, from database import session, now flask in overwritten
-can import flask, import database
-or from flask import session as flask_session, from database import session as database session

When should you import a whole library versus only one function, class, etc.?
-when you may want to use other items from module in the future, when you want to protect your
    namespace

What does if __name__ == "__main__" ask? When should you include this check at the bottom of your file?
-tests for import vs running directly

Where are the three places that you can import things from?
-from same directory you're in, from standard library, from installing and using other peoples code

What is pip?
-is tool for installing python libraries from the PyPl

What is a virtual environment? How is that different than a virtual machine?
-creates isolated python environment w. own place to keep installed libraries

Why are virtual environments necessary?
-create isolated python environment, can run specific libraries, can run different versions of python,
    creates folde where libraries can be installed

How do you create a virtual environment? How do you activate it?
-inside project directory type virtualenv env (env is directory name)
    need to activate every time you start working with source/env/bin/activate

What command can you use to view the currently installed Python libraries?
-pip3 freeze will show env configuration

What should you name the file that has the list of a Python project’s dependencies?
-good to save it as requirements.txt (pip3 freeze > requirements.txt)



Classes
How are classes different than dictionaries in terms of structure, flexibility, and data storage?
-classes store data, some are flexible, they are structured, and they have their own smarts
-dictionaries store data, are flexible, some are structured, and they do not have own smarts

What is the relationship between a class and an instance?
-a class is a type of thing, like a string or a file, an instance is the indvidual occurence
    of the class (ie the string 'hackbright')

What is instantiation?
-creating an instance of a class

What are attributes? How do you define an attribute at the class level (to be shared by all instances)? 
How do you set a new attribute on an instance? How can you update the value of an attribute on an instance?
-attributes are any data you want to associate to an instance of a class (such as name, food eaten etc)
-to define an attribute at the class level in the class declaration you put attribute = 'attribute'
-you set an attribute on an instance by doing instance.attribute = 'your input'
-you can update the value of an attribute on an instance by typing instance.attribute = 'new value', this
will override the class attribute

What is a method? How do you define a method on a class? How do you call a method?
-a method is like a function defined on a class, you define it by declaring it within the class, all methods
have at least one parameter called self and is it the instance the method is called on, you
call it by doing instance.method()

What are the key differences between functions and methods?
-methods are defined on a class, methods take self as first argument, when you call a method python
passes instance as self
-they aare both code, they both have lists of parameters, they both get called with ()

What is initialization? How is it different than instantiation?
-initialization ( def __init__(self): ) is a special method called after creating an instance that will attach instance 
attributes so you don't have to manually. It must take self and return None but you can list additional parameters
besides self. This is different than instantiation because you are not adding attrributes manually, they are being 
created along with the class

What is __init__? When does it get called?
-init is the automatic initialization, standard practice is to call it right after the class declaration,
before any other methods, it adds any required attributes for each class

***extra of mine, do not forget __reper__(self):
    it allows you to define what will appear when you print the object  
    def __reper__(self):
    """show info about cat"""
    return f'<Cat name = {self.name}>'

What is encapsulation? What is abstraction? What is polymorphism?
-encapsulation: data lives close to it's functionality
-abstraction: don'tneed to know the information a method uses internally
-polymorphism: it's easy to make different, interchangeable types of a class (like animals)

What is inheritance? When is it appropriate for one class to inherit attributes and/or methods from another?
-inheritance is the ability for a subclass to inherit from a superclass, the superclass is usually created
as an abstract class that the subclasses than inherit (such as attributes). It's appropriate to do
when you will need attributes for different child classes (such as mammal that cat and dog will then inherit)

What are the various ways in which a child class can modify methods and attributes from a parent class?
-a child class can modify a parents class by putting a declaration within it's class updating the attribute
or method, (ie max_hunger = 99)

What is super()?
-super is a way of calling a parent classes method and putting in arguments so you don't have to each time
ie class Animal:
    def __init__(self, name, species)
    self.name = name
    self.species = species

    class Cat(Animal):
    def __init__(self, name):
        super().__init__(name, "Cat")

What’s an example of violating polymorphism? What’s an example of enforcing polymorphism?
-creating inflexible code with too many conditionals violates polymorphism
    for some_animal in family_animals:
        some_animal.speak()


When overriding parent methods, what is the only method that is normal to require different arguments than the 
parent method?
-the only method where it's normal to require different arguments than the parent method is in the
__init__ method

What is an abstract class? What makes it different than a typical class?
-an abstract class is like a base class, you'll never create an instance of it but you will use itas a superclass
for your other classes

When there are methods that don’t directly map to an existing hierarchy, how can you continue to pursue 
encapsulation? (i.e. avoid copying the same method on several classes)
-you can create a mixin class that will supply a feature to subclasses
ie class ChasesLaserMixin:
"""Can chase laser pointers"""
    def chase_laser(self):
    print("Woohoo! I love chasing lasers!!!")

class Cat(ChasesLaserMixin, Animal):
    -cat now inherits everything from animal and chases a laser



